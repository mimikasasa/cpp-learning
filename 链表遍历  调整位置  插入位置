#include<iostream>
using namespace std;

struct node
{
	int data;
	node* next;
};
node* head;

node* createList()
{
	node* s, * p=NULL;
	s = new node;
	cin >> s->data;
	head = NULL;
	while (s->data != 0)
	{
		if (head == NULL)
		{
			head = s;
		}
		else p->next = s;
		p = s;
		s = new node;
		cin >> s->data;
	}
	p->next = NULL;
	delete s;
	return(head);
}

void insertNode(node* head, node* newNode, int position)
{
	node* p = head;
	int counter = 0;
	while (counter<position-1&&p->next!=NULL)
	{
		p = p->next;
		counter++;
	}

	if (counter!=position-1)
	{
		cout << "invalid position" << endl;
		return;
	}

	newNode->next = p->next;
	p->next = newNode;
}

int main()
{
	head = createList();//创建链表
	node* p = head;//从头结点开始遍历
	while (p!=NULL)
	{
		cout << p->data << " ";
		p = p->next;
	}
	cout << endl;
	
	p = head;
	int length = 0;
	while (p->next!=NULL)
	{
		p = p->next;
		length++;
	}
	
	p = head;
	int counter = 0;
	while (counter<length-2)
	{	
		p = p->next;
		counter++;
	}

	if (p->next!=NULL&&p->next->next!=NULL)
	{	
		node* lastNode = p->next->next;
		node* secondLastNode = p->next;
		secondLastNode->next = lastNode->next;
		lastNode->next = secondLastNode;
		p->next = lastNode;
	}

	p = head;
	while (p!=NULL)
	{
		cout << p->data << " ";
		p = p->next;
	}
	cout << endl;

	node* newNode = new node;
	newNode->data = 4;
	newNode->next = NULL;

	insertNode(head, newNode, 2);

	// 遍历链表并输出节点数据
	p = head;
	while (p != NULL)
	{
		cout << p->data << " ";
		p = p->next;
	}
	cout << endl;

	system("pause");
	return 0;
}
